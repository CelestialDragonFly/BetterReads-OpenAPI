//go:build go1.22

// Package betterreads provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package betterreads

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for GetBooksParamsLanguage.
const (
	Bul GetBooksParamsLanguage = "bul"
	Cat GetBooksParamsLanguage = "cat"
	Cze GetBooksParamsLanguage = "cze"
	Dut GetBooksParamsLanguage = "dut"
	Eng GetBooksParamsLanguage = "eng"
	Fre GetBooksParamsLanguage = "fre"
	Ger GetBooksParamsLanguage = "ger"
	Glg GetBooksParamsLanguage = "glg"
	Ita GetBooksParamsLanguage = "ita"
	Jpn GetBooksParamsLanguage = "jpn"
	Kor GetBooksParamsLanguage = "kor"
	Pol GetBooksParamsLanguage = "pol"
	Por GetBooksParamsLanguage = "por"
	Rus GetBooksParamsLanguage = "rus"
	Slo GetBooksParamsLanguage = "slo"
	Spa GetBooksParamsLanguage = "spa"
	Swe GetBooksParamsLanguage = "swe"
	Tur GetBooksParamsLanguage = "tur"
)

// Book defines model for Book.
type Book struct {
	Author      *string `json:"author,omitempty"`
	BookImage   *string `json:"book_image,omitempty"`
	Description *string `json:"description,omitempty"`
	Genre       *string `json:"genre,omitempty"`

	// Id Unique identifier for the book
	Id            *string             `json:"id,omitempty"`
	PublishedDate *openapi_types.Date `json:"published_date,omitempty"`
	Title         *string             `json:"title,omitempty"`
}

// GetBooksResponse defines model for GetBooksResponse.
type GetBooksResponse struct {
	Books *[]Book `json:"books,omitempty"`
}

// GetLibraryResponse defines model for GetLibraryResponse.
type GetLibraryResponse struct {
	Library *[]LibraryItem `json:"library,omitempty"`
}

// LibraryItem defines model for LibraryItem.
type LibraryItem struct {
	Author    *string `json:"author,omitempty"`
	BookId    *string `json:"book_id,omitempty"`
	BookImage *string `json:"book_image,omitempty"`
	Shelf     *string `json:"shelf,omitempty"`
	Title     *string `json:"title,omitempty"`
}

// GetBooksParams defines parameters for GetBooks.
type GetBooksParams struct {
	// Query A general search mechanism, intended to be used by a search bar with user input.
	Query *string `form:"query,omitempty" json:"query,omitempty"`

	// Title Query books by their title.
	Title *string `form:"title,omitempty" json:"title,omitempty"`

	// Author Query books by their author.
	Author *string `form:"author,omitempty" json:"author,omitempty"`

	// Subject Query books about subjects.
	Subject *string `form:"subject,omitempty" json:"subject,omitempty"`

	// Place Query books about locations.
	Place *string `form:"place,omitempty" json:"place,omitempty"`

	// Language Query books written in the requested language.
	Language *GetBooksParamsLanguage `form:"language,omitempty" json:"language,omitempty"`

	// Publisher Query books about locations.
	Publisher *string `form:"publisher,omitempty" json:"publisher,omitempty"`
}

// GetBooksParamsLanguage defines parameters for GetBooks.
type GetBooksParamsLanguage string

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Query books from the book API
	// (GET /books)
	GetBooks(w http.ResponseWriter, r *http.Request, params GetBooksParams)
	// Retrieve a book via the book id
	// (GET /books/{book_id})
	GetBooksBookId(w http.ResponseWriter, r *http.Request, bookId string)
	// Retreive a user's entire library of saved books
	// (GET /library)
	GetLibrary(w http.ResponseWriter, r *http.Request)
	// Remove a book from all user lists
	// (DELETE /library/{shelf}/{book_id})
	DeleteLibraryShelfBookId(w http.ResponseWriter, r *http.Request, shelf string, bookId string)
	// Add a book to a user's book list
	// (PUT /library/{shelf}/{book_id})
	PutLibraryShelfBookId(w http.ResponseWriter, r *http.Request, shelf string, bookId string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetBooks operation middleware
func (siw *ServerInterfaceWrapper) GetBooks(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBooksParams

	// ------------- Optional query parameter "query" -------------

	err = runtime.BindQueryParameter("form", true, false, "query", r.URL.Query(), &params.Query)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "query", Err: err})
		return
	}

	// ------------- Optional query parameter "title" -------------

	err = runtime.BindQueryParameter("form", true, false, "title", r.URL.Query(), &params.Title)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "title", Err: err})
		return
	}

	// ------------- Optional query parameter "author" -------------

	err = runtime.BindQueryParameter("form", true, false, "author", r.URL.Query(), &params.Author)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "author", Err: err})
		return
	}

	// ------------- Optional query parameter "subject" -------------

	err = runtime.BindQueryParameter("form", true, false, "subject", r.URL.Query(), &params.Subject)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subject", Err: err})
		return
	}

	// ------------- Optional query parameter "place" -------------

	err = runtime.BindQueryParameter("form", true, false, "place", r.URL.Query(), &params.Place)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "place", Err: err})
		return
	}

	// ------------- Optional query parameter "language" -------------

	err = runtime.BindQueryParameter("form", true, false, "language", r.URL.Query(), &params.Language)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "language", Err: err})
		return
	}

	// ------------- Optional query parameter "publisher" -------------

	err = runtime.BindQueryParameter("form", true, false, "publisher", r.URL.Query(), &params.Publisher)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "publisher", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetBooks(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetBooksBookId operation middleware
func (siw *ServerInterfaceWrapper) GetBooksBookId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "book_id" -------------
	var bookId string

	err = runtime.BindStyledParameterWithOptions("simple", "book_id", r.PathValue("book_id"), &bookId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "book_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetBooksBookId(w, r, bookId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetLibrary operation middleware
func (siw *ServerInterfaceWrapper) GetLibrary(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetLibrary(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteLibraryShelfBookId operation middleware
func (siw *ServerInterfaceWrapper) DeleteLibraryShelfBookId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "shelf" -------------
	var shelf string

	err = runtime.BindStyledParameterWithOptions("simple", "shelf", r.PathValue("shelf"), &shelf, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "shelf", Err: err})
		return
	}

	// ------------- Path parameter "book_id" -------------
	var bookId string

	err = runtime.BindStyledParameterWithOptions("simple", "book_id", r.PathValue("book_id"), &bookId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "book_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteLibraryShelfBookId(w, r, shelf, bookId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PutLibraryShelfBookId operation middleware
func (siw *ServerInterfaceWrapper) PutLibraryShelfBookId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "shelf" -------------
	var shelf string

	err = runtime.BindStyledParameterWithOptions("simple", "shelf", r.PathValue("shelf"), &shelf, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "shelf", Err: err})
		return
	}

	// ------------- Path parameter "book_id" -------------
	var bookId string

	err = runtime.BindStyledParameterWithOptions("simple", "book_id", r.PathValue("book_id"), &bookId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "book_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutLibraryShelfBookId(w, r, shelf, bookId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/books", wrapper.GetBooks)
	m.HandleFunc("GET "+options.BaseURL+"/books/{book_id}", wrapper.GetBooksBookId)
	m.HandleFunc("GET "+options.BaseURL+"/library", wrapper.GetLibrary)
	m.HandleFunc("DELETE "+options.BaseURL+"/library/{shelf}/{book_id}", wrapper.DeleteLibraryShelfBookId)
	m.HandleFunc("PUT "+options.BaseURL+"/library/{shelf}/{book_id}", wrapper.PutLibraryShelfBookId)

	return m
}

type GetBooksRequestObject struct {
	Params GetBooksParams
}

type GetBooksResponseObject interface {
	VisitGetBooksResponse(w http.ResponseWriter) error
}

type GetBooks200JSONResponse map[string]interface{}

func (response GetBooks200JSONResponse) VisitGetBooksResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetBooks400Response struct {
}

func (response GetBooks400Response) VisitGetBooksResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type GetBooksBookIdRequestObject struct {
	BookId string `json:"book_id"`
}

type GetBooksBookIdResponseObject interface {
	VisitGetBooksBookIdResponse(w http.ResponseWriter) error
}

type GetBooksBookId200JSONResponse map[string]interface{}

func (response GetBooksBookId200JSONResponse) VisitGetBooksBookIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetBooksBookId404Response struct {
}

func (response GetBooksBookId404Response) VisitGetBooksBookIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type GetLibraryRequestObject struct {
}

type GetLibraryResponseObject interface {
	VisitGetLibraryResponse(w http.ResponseWriter) error
}

type GetLibrary200JSONResponse map[string]interface{}

func (response GetLibrary200JSONResponse) VisitGetLibraryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetLibrary400Response struct {
}

func (response GetLibrary400Response) VisitGetLibraryResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type DeleteLibraryShelfBookIdRequestObject struct {
	Shelf  string `json:"shelf"`
	BookId string `json:"book_id"`
}

type DeleteLibraryShelfBookIdResponseObject interface {
	VisitDeleteLibraryShelfBookIdResponse(w http.ResponseWriter) error
}

type DeleteLibraryShelfBookId204Response struct {
}

func (response DeleteLibraryShelfBookId204Response) VisitDeleteLibraryShelfBookIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteLibraryShelfBookId400Response struct {
}

func (response DeleteLibraryShelfBookId400Response) VisitDeleteLibraryShelfBookIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type PutLibraryShelfBookIdRequestObject struct {
	Shelf  string `json:"shelf"`
	BookId string `json:"book_id"`
}

type PutLibraryShelfBookIdResponseObject interface {
	VisitPutLibraryShelfBookIdResponse(w http.ResponseWriter) error
}

type PutLibraryShelfBookId201Response struct {
}

func (response PutLibraryShelfBookId201Response) VisitPutLibraryShelfBookIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(201)
	return nil
}

type PutLibraryShelfBookId400Response struct {
}

func (response PutLibraryShelfBookId400Response) VisitPutLibraryShelfBookIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Query books from the book API
	// (GET /books)
	GetBooks(ctx context.Context, request GetBooksRequestObject) (GetBooksResponseObject, error)
	// Retrieve a book via the book id
	// (GET /books/{book_id})
	GetBooksBookId(ctx context.Context, request GetBooksBookIdRequestObject) (GetBooksBookIdResponseObject, error)
	// Retreive a user's entire library of saved books
	// (GET /library)
	GetLibrary(ctx context.Context, request GetLibraryRequestObject) (GetLibraryResponseObject, error)
	// Remove a book from all user lists
	// (DELETE /library/{shelf}/{book_id})
	DeleteLibraryShelfBookId(ctx context.Context, request DeleteLibraryShelfBookIdRequestObject) (DeleteLibraryShelfBookIdResponseObject, error)
	// Add a book to a user's book list
	// (PUT /library/{shelf}/{book_id})
	PutLibraryShelfBookId(ctx context.Context, request PutLibraryShelfBookIdRequestObject) (PutLibraryShelfBookIdResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// GetBooks operation middleware
func (sh *strictHandler) GetBooks(w http.ResponseWriter, r *http.Request, params GetBooksParams) {
	var request GetBooksRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetBooks(ctx, request.(GetBooksRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetBooks")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetBooksResponseObject); ok {
		if err := validResponse.VisitGetBooksResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetBooksBookId operation middleware
func (sh *strictHandler) GetBooksBookId(w http.ResponseWriter, r *http.Request, bookId string) {
	var request GetBooksBookIdRequestObject

	request.BookId = bookId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetBooksBookId(ctx, request.(GetBooksBookIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetBooksBookId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetBooksBookIdResponseObject); ok {
		if err := validResponse.VisitGetBooksBookIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetLibrary operation middleware
func (sh *strictHandler) GetLibrary(w http.ResponseWriter, r *http.Request) {
	var request GetLibraryRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetLibrary(ctx, request.(GetLibraryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetLibrary")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetLibraryResponseObject); ok {
		if err := validResponse.VisitGetLibraryResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteLibraryShelfBookId operation middleware
func (sh *strictHandler) DeleteLibraryShelfBookId(w http.ResponseWriter, r *http.Request, shelf string, bookId string) {
	var request DeleteLibraryShelfBookIdRequestObject

	request.Shelf = shelf
	request.BookId = bookId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteLibraryShelfBookId(ctx, request.(DeleteLibraryShelfBookIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteLibraryShelfBookId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteLibraryShelfBookIdResponseObject); ok {
		if err := validResponse.VisitDeleteLibraryShelfBookIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutLibraryShelfBookId operation middleware
func (sh *strictHandler) PutLibraryShelfBookId(w http.ResponseWriter, r *http.Request, shelf string, bookId string) {
	var request PutLibraryShelfBookIdRequestObject

	request.Shelf = shelf
	request.BookId = bookId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PutLibraryShelfBookId(ctx, request.(PutLibraryShelfBookIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutLibraryShelfBookId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PutLibraryShelfBookIdResponseObject); ok {
		if err := validResponse.VisitPutLibraryShelfBookIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}
